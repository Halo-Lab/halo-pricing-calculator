@import "./breakpoints.css";

@scope (#calculator-root) {
  /*
   * Normalisation styles, typography are borrowed from the
   * outer environment.
   */

  :scope {
    --white-colour: 255 255 255;
    --dark-colour: 2 2 30;
    --blue-colour: 56 39 199;
    --grey-colour: 245 245 247;
    --yellow-colour: 253 196 72;
    --red-colour: 255 3 3;

    --base-transition-time: 0.15s;
    --common-transitions: color var(--base-transition-time),
      fill var(--base-transition-time), stroke var(--base-transition-time),
      background-color var(--base-transition-time),
      outline-color var(--base-transition-time),
      border-color var(--base-transition-time),
      transform var(--base-transition-time), opacity var(--base-transition-time);

    padding-left: 1rem;
    padding-right: 1rem;
    color: rgb(var(--dark-colour));

    @media (--medium-mobile) {
      padding-left: 2rem;
      padding-right: 2rem;
    }
  }

  @layer base {
    * {
      box-sizing: border-box;
    }

    :where(button, input):where([type="submit"], [type="button"]) {
      border: none;
      font-size: var(--btn-font-size, inherit);
      font-family: inherit;
      transition: var(--common-transitions);
      background-color: var(--btn-bg-colour, inherit);

      &:enabled {
        cursor: pointer;
      }

      &:disabled {
        opacity: 0.4;
        cursor: not-allowed;
      }
    }

    input:where([type="radio"], [type="checkbox"]) {
      width: 0;
      height: 0;
      visibility: hidden;
      position: absolute;
    }

    input:where([type="email"], [type="password"], [type="text"]) {
      &:focus {
        outline: none;
      }
    }

    a[href] {
      color: var(--a-colour, inherit);
      text-decoration: none;
      transition: var(--common-transitions);
    }

    hr {
      border: none;
      height: 1px;
      background-color: rgb(var(--white-colour));
      border-radius: 0.25rem;
    }

    svg {
      width: 100%;
      color: inherit;
    }

    h1,
    h2,
    h3,
    h4 {
      font-weight: 500;
    }

    [hidden] {
      display: none;
    }
  }

  @layer components {
    :where(button, input):where([type="submit"], [type="button"]) {
      &:where([data-btn-primary], [data-btn-secondary], [data-btn-tertiary]) {
        padding: 0.625rem 1.5rem;
        border-radius: 62.5rem;
        color: var(--btn-text-colour, inherit);
        text-transform: var(--btn-text-transform, uppercase);

        /*
         * In case the button is the sliding text container.
         */
        [data-sliding-text]::before,
        [data-sliding-text]::after {
          color: var(--btn-text-colour, inherit);
        }
      }

      &[data-btn-primary] {
        --btn-bg-colour: rgb(var(--blue-colour));
        --btn-text-colour: rgb(var(--white-colour));
      }

      &[data-btn-secondary] {
        --border-colour: 0.3;

        border: 1px solid rgba(var(--dark-colour) / var(--border-colour));

        &:enabled:hover {
          --border-colour: 0.6;
        }
      }
    }

    /*
     * Common styles for up/down sliding text on hover.
     * A container is an element where hover happens.
     * A text is a direct parent element for the sliding text.
     */
    [data-sliding-text-container] {
      [data-sliding-text] {
        position: relative;
        display: inline-block;
        transition: var(--common-transitions);
        /*
         * For accessibility an element should contain some text,
         * but we don't want it to interfere with visible texts.
         */
        color: transparent;

        &::before,
        &::after {
          position: absolute;
          inset: 0;
          content: attr(data-sliding-text);
          transition: var(--common-transitions);
        }

        &::before {
          opacity: 1;
        }

        &::after {
          opacity: 0;
          transform: translateY(100%);
        }
      }

      /*
       * :enabled cannot be used here, because any element can be used
       * as a container. Some elements may provide :enabled, some may not.
       * That's why we rely on the :disabled state for those who can provide it,
       * otherwise hover always works.
       */
      &:not(:disabled):hover {
        [data-sliding-text] {
          &::before {
            transform: translateY(-100%);
            opacity: 0;
          }

          &::after {
            opacity: 1;
            transform: translateY(0);
          }
        }
      }
    }

    /*
     * Tabbed card.
     */
    section:has([data-tabbed-background]) {
      --tabbed-border-radius: 1rem;

      position: relative;
      border-bottom-left-radius: var(--tabbed-border-radius);
      border-bottom-right-radius: var(--tabbed-border-radius);

      &::after,
      [data-tabbed-background] {
        position: absolute;
        z-index: -1;
      }

      &::after {
        content: "";
        display: block;
        height: 80%;
        inset: 20% 0 0;
        background-color: var(--tabbed-background-colour, inherit);
        border-bottom-left-radius: inherit;
        border-bottom-right-radius: inherit;
      }

      [data-tabbed-background] {
        inset: 0;
        fill: var(--tabbed-background-colour, inherit);
      }
    }

    label[for] {
      display: flex;
      align-items: center;
      transition: var(--common-transitions);
      cursor: pointer;
    }

    input:where([type="email"], [type="password"], [type="text"]) {
      border-top: none;
      border-left: none;
      border-right: none;
      padding-bottom: 1rem;
      border-bottom: 1px solid rgba(var(--dark-colour) / 0.5);
      transition: var(--common-transitions);
    }
  }
}
